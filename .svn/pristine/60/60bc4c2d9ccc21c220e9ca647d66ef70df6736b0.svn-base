using System;
using System.Collections.Generic;
using System.Windows;
using System.Windows.Controls;
using System.Windows.Input;
using System.Windows.Media;
using Typo.Controller;
using Typo.Model;

namespace Typo.View
{
    /// <summary>
    ///     Interaction logic for CharcterPicker.xaml
    /// </summary>
    public partial class CharcterPicker : UserControl
    {
        private readonly List<char> characterList = new List<char>();
        private readonly KeyboardController keyboardController;
        private readonly MainWindow mainWindow;
        private ExerciseView exerciseView;


        public CharcterPicker(MainWindow mainWindow)
        {
            this.mainWindow = mainWindow;
            InitializeComponent();
            keyboardController = new KeyboardController(this);
            DataContext = this;
        }

        public string Characters { get; set; }

        private void Back_Click(object sender, RoutedEventArgs e)
        {
            mainWindow.ClearMainFrameContent();
            mainWindow.MainFrame.Content = new MainMenu(mainWindow);
        }

        private void Start_Click(object sender, RoutedEventArgs e)
        {
            exerciseView = new ExerciseView(mainWindow, new CharacterExercise(characterList, (int) MaxWordLengthSlider.Value));
            mainWindow.ClearMainFrameContent();
            mainWindow.MainFrame.Content = exerciseView;
        }

        private void UserControl_Loaded(object sender, RoutedEventArgs e)
        {
            var window = Window.GetWindow(this);
            window.KeyDown += HandleKeyPress;
        }

        private void HandleKeyPress(object sender, KeyEventArgs e)
        {
            var key = new KeyConverter().ConvertToString(e.Key)[0];
            if (!characterList.Contains(key))
            {
                characterList.Add(key);
                keyboardController.HandleKey_Down(e, Brushes.Gold);
            }
            else
            {
                characterList.Remove(key);
                keyboardController.HandleKey_Down(e, Brushes.LightGray);
            }


            MakeStringFormCharacterlist(characterList);
            CharactersString.Content = Characters;
            InvalidateVisual();
        }

        private void MakeStringFormCharacterlist(List<char> chars)
        {
            Characters = string.Empty;
            foreach (var c in chars)
                Characters += c + " ";
            Console.WriteLine(Characters);
        }
    }
}