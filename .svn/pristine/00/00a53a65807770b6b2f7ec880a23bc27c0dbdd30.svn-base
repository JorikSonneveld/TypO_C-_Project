using System;
using System.Text;
using System.Collections.Generic;
using System.Windows;
using Typo.Model;
using Typo.View;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Windows.Media;
using System.Windows.Input;
using System.Windows.Controls;
using Typo.Controller;

namespace TypingApplicationTestEnvoirement.Controller
{
    /// <summary>
    /// Summary description for KeyboardControllerTest
    /// </summary>
    [TestClass]
    public class KeyboardControllerTest
    {
        [TestMethod]
        public void HighlightCorrectButton_ShouldHighlightGivenButtonInGivenColor_WhenGivenButtonAndColor()
        {
            //Arrange
            ExerciseView exerciseView = new ExerciseView(new NumberExercise(3, 4, 5));
            Brush brush;
            //Act
            exerciseView.ExerciseController.keyboardController.HighlightCorrectButton('e', Brushes.Yellow);
            Button[] bs = exerciseView.ExerciseController.keyboardController.FindButtons(Key.E);
            brush = bs[0].Background;
            //Assert
            Assert.AreEqual(Brushes.Yellow, brush);
        }

        [TestMethod]
        public void FindButtons_ShouldFindButtons_WhenExerciseViewIsInitializedAndWhenGivenKey()
        {
            //Arrange
            ExerciseView exerciseView = new ExerciseView(new NumberExercise(3, 4, 5));
            //Act
            Button[] bs = exerciseView.ExerciseController.keyboardController.FindButtons(Key.E);
            //Assert
            Assert.IsNotNull(bs);
        }

        [TestMethod]
        public void HighlighButtons_ShouldHighlightButtons_WhenGivenButtonsAndBrus()
        {
            //Arrange
            ExerciseView exerciseView = new ExerciseView(new NumberExercise(3, 4, 5));
            Button b1 = new Button();
            Button b2 = new Button();
            Button[] buttons = { b1, b2 };
            //Act
            exerciseView.ExerciseController.keyboardController.HighightButtons(buttons, Brushes.Red);
            //Assert
            Assert.AreEqual(Brushes.Red, b1.Background);
            Assert.AreEqual(Brushes.Red, b2.Background);
        }

        [TestMethod]
        public void NumPadEnabled_ShouldSetNumPad_WhenGivenBool()
        {
            //Arrange
            ExerciseView exerciseView = new ExerciseView(new NumberExercise(3, 4, 5));
            //Act
            exerciseView.ExerciseController.keyboardController.NumPadEnabled(false);
            //Assert
            Assert.IsFalse(exerciseView.keyBoard.IsVisible);
        }

        [TestMethod]
        public void ResolveKey_ShouldReturnKey_WhenGivenChar()
        {
            //Act
            Key k = KeyboardController.ResolveKey('e');
            //Assert
            Assert.AreEqual(Key.E, k);
        }
    }
}
