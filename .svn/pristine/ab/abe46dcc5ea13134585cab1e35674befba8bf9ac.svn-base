using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;
using TypApplication.Model;
using TypApplication.Properties;

namespace TypApplication.View
{
    public partial class KeyBoard : UserControl
    {
        public int CorrectKeyColor;
        public List<Key> Keys = new List<Key>();
        public int WrongKeyColor;

        public KeyBoard()
        {
            InitColorblindSettings();
            InitializeComponent();
            EnableNumPad(Settings.Default.NUM);
            AddKeys();
        }

        //Makes an act on a key/multiple keys
        public void ActKey(int pressedKey, char expectedKey)
        {
            //if the pressed key is a key we're listening to

            if (ConvertKeyCodeToButton(pressedKey) == null)
                return;

            //if the pressed key equals the expected key
            var correctKeyButton = ConvertKeyCodeToButton(pressedKey);

            //make that key grey to reprisent a keypress
            if (ConvertKeyCodeToChar(pressedKey) == expectedKey)
            {
                SetKeyColor(correctKeyButton, Color.Gray);
            }
            //if you press a wrong key
            else
            {
                //make the pressed button red, and colour the expected key green
                var wrongKeyButton = ConvertKeyCodeToButton(ConvertCharacterToKeyCode(expectedKey));
                SetKeyColor(correctKeyButton, Color.FromArgb(WrongKeyColor));
                if (wrongKeyButton == null)
                    return;
                SetKeyColor(wrongKeyButton, Color.FromArgb(CorrectKeyColor));
            }
        }

        public void HighLightKey(char expectedKey)
        {
            //if the pressed key is a key we're listening to
            char keyChar = char.ToUpper(expectedKey);
            if (ConvertKeyCodeToButton(ConvertCharacterToKeyCode(keyChar)) == null)
                return;
            if (char.IsUpper(expectedKey))
                SetKeyColor(btnShiftkey, Color.Gold);
            else
                SetKeyColor(btnShiftkey, Color.White);

            var keyButton = ConvertKeyCodeToButton(ConvertCharacterToKeyCode(keyChar));
            SetKeyColor(keyButton, Color.Gold);
        }

        //sets a ButtonBackgroundColor
        public void SetKeyColor(Button key, Color color) => key.BackColor = color;

        //resets the key colour
        public void ResetKeyColor(int key)
        {
            Button button = ConvertKeyCodeToButton(key);
            if (button == null)
                return;

            button.BackColor = Color.White;
        }

        //Switch and Setcolorblind
        public void InitColorblindSettings()
        {
            if (Settings.Default.colorblind)
            {
                CorrectKeyColor = Settings.Default.colorblindOnTrue;
                WrongKeyColor = Settings.Default.colorblindOnFalse;
            }
            else
            {
                CorrectKeyColor = Settings.Default.colorblindOffTrue;
                WrongKeyColor = Settings.Default.colorblindOffFalse;
            }
        }

        //convert a keycode to a char
        public char ConvertKeyCodeToChar(int keyCode) => (char)keyCode;

        //convert a char to a keycode
        public int ConvertCharacterToKeyCode(char character) => character;

        //convert a keycode to a button
        public Button ConvertKeyCodeToButton(int code)
        {
            foreach (var key in Keys)
                if (key.KeyCode == code)
                    return key.Button;
            return null;
        }

        //add keys we're listening to
        private void AddKeys()
        {
            Keys = new List<Key>
            {
                new Key(192, btnOemtilde),
                new Key(49, btnD1),
                new Key(50, btnD2),
                new Key(51, btnD3),
                new Key(52, btnD4),
                new Key(53, btnD5),
                new Key(54, btnD6),
                new Key(55, btnD7),
                new Key(56, btnD8),
                new Key(57, btnD9),
                new Key(48, btnD0),
                new Key(189, btnOemminus),
                new Key(187, btnOemplus),
                new Key(8, btnBack),
                new Key(9, btnTab),
                new Key(81, btnQ),
                new Key(87, btnW),
                new Key(69, btnE),
                new Key(82, btnR),
                new Key(84, btnT),
                new Key(89, btnY),
                new Key(85, btnU),
                new Key(73, btnI),
                new Key(79, btnO),
                new Key(80, btnP),
                new Key(65, btnA),
                new Key(83, btnS),
                new Key(68, btnD),
                new Key(70, btnF),
                new Key(71, btnG),
                new Key(72, btnH),
                new Key(74, btnJ),
                new Key(75, btnK),
                new Key(76, btnL),
                new Key(90, btnZ),
                new Key(88, btnX),
                new Key(67, btnC),
                new Key(86, btnV),
                new Key(66, btnB),
                new Key(78, btnN),
                new Key(77, btnM),
                new Key(20, btnCapital),
                new Key(16, btnShiftkey),
                new Key(17, btnControlKey),
                new Key(18, btnMenu),
                new Key(219, btnOemOpenBrackets),
                new Key(212, btnOem6),
                new Key(220, btnSlashOem5),
                new Key(186, btnOem1),
                new Key(222, btnOem7),
                new Key(188, btnOemcomma),
                new Key(190, btnOemPeriod),
                new Key(191, btnOemQuestion),
                new Key(32, btnSpace),
                new Key(96, btn0),
                new Key(97, btn1),
                new Key(98, btn2),
                new Key(99, btn3),
                new Key(100, btn4),
                new Key(101, btn5),
                new Key(102, btn6),
                new Key(103, btn7),
                new Key(104, btn8),
                new Key(105, btn9),
                new Key(110, btnPeriod),
                new Key(144, btnNumLock),
                new Key(111, btnSlash),
                new Key(106, btnStar),
                new Key(109, btnMinus),
                new Key(107, btnPlus),
            };
        }

        public void EnableNumPad(bool enabled)
        {
            if (enabled)
                NUMpadPanel.Show();
            else
                NUMpadPanel.Hide();
        }

        private void KeyBoard_Load(object sender, EventArgs e)
        {
        }
    }
}