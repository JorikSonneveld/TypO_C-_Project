using System;
using System.Collections.Generic;
using System.Linq;
using System.Windows.Input;
using Typo.Model;
using Typo.Model.Database;
using Typo.View;
using System.Windows.Controls;

namespace Typo.Controller
{
    public class ExerciseController
    {
        private DatabaseController databaseController = new DatabaseController();
        public KeyboardController keyboardController { get; set; }
        private readonly KeyData keydata = new KeyData();

        private ExerciseView exerciseView;
        public Exercise Exercise { get; set; }

        public ExerciseController(ExerciseView exerciseView, Exercise exercise)
        {
            this.exerciseView = exerciseView;
            Exercise = exercise;
            keyboardController = new KeyboardController(exerciseView, this);
            exerciseView.ExerciseTextBox.DataContext = Exercise;
        }

        public ExerciseController(ExerciseView exerciseView, ExerciseType exerciseType)
        {
            switch (exerciseType)
            {
                case ExerciseType.Word:
                    CreateWordExercise();
                    break;
                case ExerciseType.Number:
                    CreateNumberExercise();
                    break;
                case ExerciseType.Generated:
                    CreateWordExercise();
                    break;
            }
            this.exerciseView = exerciseView;
            keyboardController = new KeyboardController(exerciseView, this);
            exerciseView.ExerciseTextBox.DataContext = Exercise;
        }

        public void CreateNumberExercise()
        {
            //Hardcoded - TOOD Selectionmenu for Min/Max numbers
            Exercise = new NumberExercise(-100, 100, 15);
        }

        public void CreateCharacterExercise(List<char> characterList, int maxWordLenght)
        {
            Exercise = new CharacterExercise(characterList, maxWordLenght);
        }

        public void CreateWordExercise()
        {
            Exercise = new WordExercise(databaseController.RetrieveRandomDbWords());
        }

        public void CreateCourse(Course course)
        {
            Exercise = new CourseExercise(course);
        }

        public void Handle_Key(object sender, KeyEventArgs e)
        {
            CheckDone();

            string inputString = e.Key.ToString().ToLower();
            if (Console.CapsLock)
                inputString = inputString.ToUpper();
                
            if (inputString == GetExpectedKey())
            {
                SetNextExpectedKey();

            }
            Console.WriteLine(GetExpectedKey());
            //keyboardController.HandleKey_Down(sender, e);
        }

        public void CheckDone()
        {
            if (Exercise.ExerciseString == string.Empty)
            {
                CourseFisnished cf = new CourseFisnished(7, 654);
            }
                
        }

        public string GetExpectedKey()
        {
            return Exercise.ExerciseString[0].ToString();
        }

        public void SetNextExpectedKey()
        {
            Exercise.InputString += Exercise.ExerciseString[0];
            Exercise.ExerciseString = Exercise.ExerciseString.Substring(1, Exercise.ExerciseString.Count() - 1);
        }

        public void ResetValues()
        {
            KeyData.GoodKeyPresses = 0;
            KeyData.KeystrokeTime = 0;
            KeyData.KeystrokesPerMinute = 0;
            KeyData.Accuracy = 100;
            KeyData.KeystrokeCounter = 0;
        }

        public void UpdateKeystrokesPerMinute()
        {
            KeyData.KeystrokeTime++; //add one to the timer per tick

            if (KeyData.KeystrokeTime == 1) //if its the first time
                keydata.StartMillisec =
                    Convert.ToInt64((DateTime.Now - DateTime.MinValue)
                        .TotalMilliseconds); //a benchmark time in milliseconds where every time is calculated from

            keydata.CurrentMillisec =
                Convert.ToInt64((DateTime.Now - DateTime.MinValue)
                    .TotalMilliseconds); //the current time in milliseconds

            if (keydata.CurrentMillisec - keydata.StartMillisec >= 0
            ) //check if the current time is higher then the benchmarktime
                keydata.Delay =
                    keydata.CurrentMillisec - keydata.StartMillisec; //calculate the time difference in milliseconds

            if (KeyData.KeystrokeTime % 40 == 0) //check if the count of ticks will be 0 if divided by zero
                CalculateKeystrokesPerMinute();
        }

        public void CalculateKeystrokesPerMinute()
        {
            var temp = KeyData.KeystrokeCounter /
                       (keydata.Delay /
                        60000m); // first make a time in minutes from the delay then calculate the stokes per minute
            KeyData.KeystrokesPerMinute = Convert.ToInt32(temp);
        }

        public void CalculateAccuracy()
        {
            if (KeyData.KeystrokeCounter > 0 && KeyData.KeystrokeCounter >= KeyData.GoodKeyPresses)
            {
                var temp = KeyData.GoodKeyPresses / (KeyData.KeystrokeCounter * 1m) * 100;
                KeyData.Accuracy = Convert.ToInt32(temp);
            }
        }

        public void UpdateExerciseToNextChar()
        {
            KeyData.GoodKeyPresses++;
            Exercise.InputString += Exercise.ExerciseString[0];
            Exercise.ExerciseString = Exercise.ExerciseString.Substring(1, Exercise.ExerciseString.Count() - 1);
        }

            //Check if pressed key is good, wrong or max reached
        //    public void Check(KeyEventArgs e)
        //    {
        //    //if (e.KeyCode != Keys.ShiftKey && e.KeyCode != Keys.Tab && e.KeyCode != Keys.Back &&
        //    //    e.KeyCode != Keys.Capital && e.KeyValue != 18 && e.KeyCode != Keys.ControlKey &&
        //    //    e.KeyCode != Keys.Shift && e.KeyCode != Keys.LWin && e.KeyCode != Keys.RWin && 
        //    //    e.KeyCode != Keys.LControlKey && e.KeyCode != Keys.RControlKey && e.KeyCode != Keys.NumLock)
        //        KeyData.KeystrokeCounter++;

        //    char expectedKey = Exercise.ExerciseString[0];
        //    if (char.IsUpper(expectedKey))
        //    {
        //        //if ((e.KeyData.ToString().Contains("Shift") || e.KeyData.ToString().Contains("Capital")) && expectedKey == (char) e.KeyValue)
        //            //UpdateExerciseToNextChar(Exercise);
        //    }
        //    else
        //    {
        //        char Numpad = '0';
        //        if (char.IsLower((char)e.KeyValue))
        //        {
        //            string text = e.KeyCode.ToString();
        //            text = text.Substring(text.Length - 1, 1);
        //            Numpad = Convert.ToChar(text);

        //        }
        //        if ((char.ToUpper(expectedKey) == (char)e.KeyValue) || (char.ToUpper(expectedKey) == Numpad))
        //        {
        //            //UpdateExerciseToNextChar(Exercise);
        //        }
        //        else
        //        {
        //            //Mistakes.Add(expectedKey.ToString().ToLower()); //adds the expected key to the list
        //        }
        //        if (Exercise.ExerciseString.Length == 0 && char.ToUpper(expectedKey) == (char)e.KeyValue)
        //        {
        //            //exerciseView.ShowCourseFinished(KeyData.KeystrokesPerMinute, KeyData.Accuracy,"testtitel");
        //            //databaseController.AddMistakesToDb(Mistakes); //sends the list to be put in the db
        //            //exerciseView.StopTimer();
        //        }
        //    }
        //    UpdateKeystrokesPerMinute();
        //    CalculateAccuracy();
        //    //exerciseView.keyBoard.ActKey(e.KeyValue, char.ToUpper(expectedKey));
        //}

        public string MakeWordsFromChars(List<char> charlist, int maxWordLength)
        {
            if (!charlist.Any() || maxWordLength < 3) // check if the list is empty 
                return "";

            List<Word> dbWords = databaseController.RetrieveAllWords(); // get all the words from the db
            List<string> ExerciseWords = new List<string>();
            int ExerciseLength = 5; // this is how long the exercise will be
            Random rnd = new Random();
            for (int i = 0; i < dbWords.Count; i++) // go through every word from the db
            {
                if (ExerciseWords.Count >= ExerciseLength) // check if the exercise is long enough
                    break;                
                else
                {
                    string word = dbWords[i].ToString(); // set the word to a string
                    char[] Chars = word.ToCharArray(); // set the string to a char array
                    if (!Chars.Except(charlist).Any() && word.Length <= maxWordLength) // check if all the letters in the char array are in the given list of chars
                        ExerciseWords.Add(word);
                }
            }
            if (ExerciseWords.Count < ExerciseLength) // check if any more words are needed
            {
                int CountRandomChars = ExerciseLength - ExerciseWords.Count; // calculate how many words are needed to get the good exercise length
                for (int i = 0; i < CountRandomChars; i++) // loop as many times as words are needed
                {                    
                    int CharLength = rnd.Next(3, maxWordLength + 1); // get a random number for the length of the word
                    string RandomWord = "";
                    for (int c = 0; c < CharLength; c++) // loop as many times as letters are needed in the word
                    {                                 
                        int charNumber = rnd.Next(0, charlist.Count); // get a random number for what char it will be
                        RandomWord += charlist[charNumber];  // add the letter to the existing word
                    }
                    ExerciseWords.Add(RandomWord); // add the word to the word list
                }
            }
            var OrderedExerciseWords = ExerciseWords.OrderBy(item => rnd.Next()); // shuffle the words in the list
            string EndExerciseWords = "";

            foreach (string word in OrderedExerciseWords)
            {
                EndExerciseWords += word.ToString(); // set all the words in a string
                EndExerciseWords += " ";
            }
            EndExerciseWords = EndExerciseWords.TrimEnd(' '); // trim the last space
            return EndExerciseWords;
        }
    }
}