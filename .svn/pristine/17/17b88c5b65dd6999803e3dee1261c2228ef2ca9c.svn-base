using System.Drawing;
using System.Drawing.Drawing2D;
using System.Windows.Forms;
using TypApplication.Controller;

namespace TypApplication.View
{
    public partial class MainForm : Form
    {
        public DatabaseController Database = new DatabaseController();
        private MainMenu mainMenu;

        public MainForm()
        {
            InitializeComponent();
            ShowMainMenu();
        }

        public void ShowMainMenu()
        {
            ClearForm();
            mainMenu = new MainMenu(this);
            Controls.Add(mainMenu);
            CenterView(mainMenu);
        }

        public void NewExercise()
        {
            ClearForm();
            var exerciseView = new ExerciseView(this);
            Controls.Add(exerciseView);
            CenterView(exerciseView);
        }

        public void NewGeneratedExcercise()
        {
            ClearForm();
            var exerciseView = new ExerciseView(this);
            Controls.Add(exerciseView);
            CenterView(exerciseView);
        }

        public void ShowCourseFinished(int keyscore, int accscore)
        {
            ClearForm();
            var completedview = new CourseFinished(this, keyscore, accscore);
            Controls.Add(completedview);
            CenterView(completedview);
        }

        public void ShowCourses()
        {
            ClearForm();
            var courses = new Courses(this);
            Controls.Add(courses);
            CenterView(courses);
        }

        public void ShowSettings()
        {
            ClearForm();
            var settingsView = new SettingsView(this);
            Controls.Add(settingsView);
            CenterView(settingsView);
        }

        private void ClearForm()
        {
            Controls.Clear();
            mainMenu = null;
        }

        private void CenterView(Control control)
        {
            control.Left = (ClientSize.Width - control.Width) / 2;
            control.Top = (ClientSize.Height - control.Height) / 2;
        }

        protected override void OnPaintBackground(PaintEventArgs e)
        {
            using (var brush = new LinearGradientBrush(ClientRectangle, Color.FromArgb(47, 54, 80),
                Color.FromArgb(29, 33, 58), 90F))
            {
                e.Graphics.FillRectangle(brush, ClientRectangle);
            }
        }
    }
}