using System;
using System.Collections.Generic;
using System.Drawing;
using System.Windows.Forms;
using TypApplication.Controller;
using TypApplication.Model;
using TypApplication.Properties;

namespace TypApplication.View
{
    public partial class ExerciseView : UserControl
    {
        private readonly DatabaseController DbController = new DatabaseController();
        private ExerciseController ExController;
        private KeyData keyData = new KeyData();
        public MainForm parentForm;

        public ExerciseView(MainForm parentForm, bool generated)
        {
            DbController.DbConnect();
            this.parentForm = parentForm;
            InitializeComponent();
            keyBoard.Refresh();
            StopTimer();
            KeystrokeTimer.Interval = 1; //runs every millisecond
            KeystrokeTimer.Tick += Update; //every tick it will Update()
            //Fill wordlist if empty, else start exercise
            if (DbController.GetWordListCount() == 0)
            {
                DbController.FillDatabaseWords();
                NewExercise();
            }
            else
            {
                NewExercise();
            }
        }

        public void NewExercise()
        {
            var list = new List<Word>();
            Exercise wordExercise = new WordExercise(list);
            ExController = new ExerciseController(ExerciseBox, wordExercise, this, DbController);
            wordExercise.ExerciseString = wordExercise.PrintExercise();

            // If has mistakes, random, else based on mistakes
            if (parentForm.database.HasMistakes())
            {
                var generatedWords = DbController.GenerateWords(5, 3);
                wordExercise.ExerciseString = generatedWords;
                ExerciseBox.Text = generatedWords;
            }
            else
            {
                var generatedWords = parentForm.database.RetrieveRandomDbWords();
                wordExercise.ExerciseString = generatedWords;
                ExerciseBox.Text = generatedWords;
            }
            UpdateColorsRichTextbox(wordExercise);
            //wordExercise.ExerciseString = wordExercise.PrintExercise();
        }

        public void Update(object sender, EventArgs e)
        {
            ExController.UpdateKeystrokesPerMinute();
            KeystrokesPerMinute.Text = $"Keystrokes per minute {KeyData.KeystrokesPerMinute}"; //update the label
            ExController.UpdateKeystrokesPerMinute();
            ExController.CalculateAccuracy();
            Accuracy.Text = $"Accuracy {KeyData.Accuracy}%";
            Refresh();
            //Console.WriteLine(KeyData.KeystrokeCounter);
        }

        private void ReturnMainmenuButton_Click(object sender, EventArgs e)
        {
            parentForm.ShowMainMenu();

            // Reset values
            StopTimer();
            DbController.AddMistakesToDd(ExController.Mistakes);
        }

        public void UpdateColorsRichTextbox(Exercise exercise)
        {
            //Goede Richtextbox hier zetten
            ExerciseBox.Clear();
            ExerciseBox.AppendText(exercise.InputString, Color.FromArgb(Settings.Default.TextColor));
            ExerciseBox.AppendText(exercise.ExerciseString, Color.Black);
        }

        private void ExerciseBox_KeyDown(object sender, KeyEventArgs e)
        {
            if (KeyData.KeystrokeCounter == 0)
                KeystrokeTimer.Start(); //start the timer
            if (e.KeyCode == Keys.Back || e.KeyCode == Keys.Tab)
                e.Handled = true;
            ExController.Check(e);
        }

        private void ExerciseBox_KeyUp(object sender, KeyEventArgs e)
        {
            keyBoard.ResetKeyColor(e.KeyValue);
        }

        public void StopTimer()
        {
            KeystrokeTimer.Stop(); //stop the timer  
        }
    }

    public static class RichTextBoxExtensions
    {
        public static void AppendText(this RichTextBox box, string text, Color color)
        {
            box.SelectionStart = box.TextLength;
            box.SelectionLength = 0;

            box.SelectionColor = color;
            //Console.WriteLine(text);
            box.AppendText(text);
            box.SelectionColor = box.ForeColor;
        }
    }
}