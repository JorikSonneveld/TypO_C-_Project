using System;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using System.Collections.Generic;
using System.Linq;
using Typo.Controller;
using Typo.Model;
using Moq;
using System.Windows;

namespace TypingApplicationTestEnvoirement.Controller
{
    using System.Data.Entity;
    using System.Security.Cryptography.X509Certificates;
    using Typo.Model.Database;

    [TestClass]
    public class DatabaseControllerTest
    {
        DatabaseController dbController = new DatabaseController();


        [TestMethod]
        public void RetrieveRandomDbWords_ShouldRetrieveAtLeastOneRandomWordFromDatabase_WhenCalled()
        {
            //Arrange
            //int expected = 15;
            //Act
            //var countWords = dbController.RetrieveRandomDbWords().Split().Length;

            //Assert
            //Assert.AreEqual(expected, countWords);
        }

        [TestMethod]
        public void DeleteCourse_ShouldDeleteCourse_WhenGivenCourseID()
        {
            //Arrange
            var data = new List<Course>
            {
                new Course{CourseID = 1, Title = "Test", Text = "esht"},
                new Course{CourseID = 2, Title = "Testasdf", Text = "sdfh"}
            }.AsQueryable();

            //Act
            var mockSet = new Mock<DbSet<Course>>();
            mockSet.As<IQueryable<Course>>().Setup(m => m.Provider).Returns(data.Provider);
            mockSet.As<IQueryable<Course>>().Setup(m => m.Expression).Returns(data.Expression);

            var mockApplicationDatabase = new Mock<ApplicationDatabase>();
            mockApplicationDatabase.Setup(c => c.Courses).Returns(mockSet.Object);
            var databaseController = new DatabaseController();
            databaseController.ApplicationDatabase = mockApplicationDatabase.Object;

            var courseList = databaseController.RetrieveAllDbCourses();
            //Assert.AreEqual("Test", courseList[0].Title);
            databaseController.DeleteCourse(2);
            var courseListNew = databaseController.RetrieveAllDbCourses();
            //Assert.AreEqual("niks", courseListNew[1].Title);


            //dbController.AddCourse();
            //dbController.DeleteCourse(course.CourseID);
            //Assert.IsNull(mockApplicationDatabase.Object.GetCourseId(course.Title));
            //Assert
            //Assert.AreEqual(dbController.ApplicationDatabase.Courses.Any(c => c.Title == "TITLE"), false);
        }

        [TestMethod]
        public void RetrieveRandomDbWords_ShouldNotRetrieveEmptyListFromDatabase_WhenCalled()
        {
            //arrange
            int expected = 1;
            //Act
            var randomWords = dbController.RetrieveRandomDbWords().ToString();
            var newCount = randomWords.Split().Length;
            //Assert
            Assert.AreEqual(expected, newCount);
        }

        [TestMethod]
        public void ShouldRegisterMistake_WhenMistakeMade()
        {
            //Arrange
            var mistake = "A";
            var testList = new List<string> { mistake };

            //Act
            //dbController.AddMistakesToDb(testList);
            var hasMistakes = dbController.HasMistakes();

            //Assert
            Assert.AreEqual(true, hasMistakes);
        }


        //[TestMethod]
        //public void ShouldAddCourse_WhenNotExcisted()
        //{
        //    //Arrange
        //    var title = "Unittest";
        //    var text = "Heel mooi";
        //    var visible = true;
        //    var testCourse = "UnitTest";

        //    //Act
        //    var result = dbController.AddCourse(text, title, visible);

        //    //Assert
        //    Assert.AreEqual(true, result);
        //    dbController.DeleteCourse(dbController.GetCourseId(testCourse));
        //}

        //[TestMethod]
        //public void ShouldAddResultWhenCourseFinished()
        //{
        //    //Arrange
        //    var title = "UnitTestResult";
        //    var keyScore = 200;
        //    var accScore = 95;
        //    var userNameId = 2;

        //    //Act
        //    dbController.AddCourse("text", title, true);
        //    this.dbController.SaveResult(keyScore, accScore, userNameId, title);

        //    //Assert
        //    Assert.AreEqual(true, this.dbController.GetCourseVisibility(title));
        //    dbController.DeleteCourse(dbController.GetCourseId(title));
        //    //this.dbController.ApplicationDatabase.Results.Remove(this.dbController.ApplicationDatabase.Results.Single(x => x.Title.Equals(title)));
        //}

        [TestMethod]
        public void RetrieveCoursesCurrentlyAvailable_ShouldReturnNULL_WhenCurrentTimeIsNotBetweenCourseStartAndEndTime()
        {
            //Arrange
            var data = new List<Course>
            {
                new Course { Title = "Titel", Text = "Deze toets is nog bezig", StartDate = new DateTime(2221,1,1,1,1,1), EndDate = new DateTime(2222,1,1,1,1,1) , Official = true },
                new Course { Title = "Titel", Text = "Deze toets is nog bezig", StartDate = new DateTime(2026,1,1,1,1,1), EndDate = new DateTime(2017,1,1,1,1,1) , Official = true },
                new Course { Title = "Titel", Text = "Deze toets is nog bezig", StartDate = new DateTime(2017,1,1,1,1,1), EndDate = new DateTime(2016,1,1,1,1,1) , Official = true }
            }.AsQueryable();

            var results = new List<Result>
            {
                new Result { ResultId = 1, StudentID = 1, CourseID = 1, KeyScore = 100, AccScore = 100 }
            }.AsQueryable();

            var resultMockSet = new Mock<DbSet<Result>>();
            resultMockSet.As<IQueryable<Result>>().Setup(m => m.Provider).Returns(results.Provider);
            resultMockSet.As<IQueryable<Result>>().Setup(m => m.Expression).Returns(results.Expression);

            var courseMockset = new Mock<DbSet<Course>>();
            courseMockset.As<IQueryable<Course>>().Setup(m => m.Provider).Returns(data.Provider);
            courseMockset.As<IQueryable<Course>>().Setup(m => m.Expression).Returns(data.Expression);

            var mockApplicationDatabase = new Mock<ApplicationDatabase>();
            mockApplicationDatabase.Setup(c => c.Courses).Returns(courseMockset.Object);
            mockApplicationDatabase.Setup(c => c.Results).Returns(resultMockSet.Object);

            var DatabaseController = new DatabaseController();
            DatabaseController.ApplicationDatabase = mockApplicationDatabase.Object;

            //Act
            Course courses = DatabaseController.RetrieveCourseCurrentlyAvailable(1);

            //Assert
            Assert.IsNull(courses);
        }

        [TestMethod]
        public void RetrieveCoursesCurrentlyAvailable_ShouldReturnCourse_WhenCurrentTimeIsBetweenCourseStartAndEndTime()
        {
            //Arrange
            var data = new List<Course>
            {
                new Course { Title = "Titel", Text = "Deze toets is nog bezig", StartDate = new DateTime(2017,1,1,1,1,1), EndDate = new DateTime(2222,1,1,1,1,1) , Official = true },

            }.AsQueryable();

            var results = new List<Result>
            {
                new Result { ResultId = 1, StudentID = 1, CourseID = 1, KeyScore = 100, AccScore = 100 }
            }.AsQueryable();

            var resultMockSet = new Mock<DbSet<Result>>();
            resultMockSet.As<IQueryable<Result>>().Setup(m => m.Provider).Returns(results.Provider);
            resultMockSet.As<IQueryable<Result>>().Setup(m => m.Expression).Returns(results.Expression);
            
            var courseMockset = new Mock<DbSet<Course>>();
            courseMockset.As<IQueryable<Course>>().Setup(m => m.Provider).Returns(data.Provider);
            courseMockset.As<IQueryable<Course>>().Setup(m => m.Expression).Returns(data.Expression);

            var mockApplicationDatabase = new Mock<ApplicationDatabase>();
            mockApplicationDatabase.Setup(c => c.Courses).Returns(courseMockset.Object);
            mockApplicationDatabase.Setup(c => c.Results).Returns(resultMockSet.Object);

            var DatabaseController = new DatabaseController();
            DatabaseController.ApplicationDatabase = mockApplicationDatabase.Object;

            //Act
            Course courses = DatabaseController.RetrieveCourseCurrentlyAvailable(1);

            //Assert
            Assert.AreEqual("Deze toets is nog bezig", courses.Text);
        }

        [TestMethod]
        public void RetrieveNonOfficialCourses_ShouldOnlyReturnNonOfficialCourses()
        {
            //Arrange
            var data = new List<Course>
            {
                new Course { Title = "Titel", Text = "Deze toets is nog bezig", StartDate = new DateTime(2221,1,1,1,1,1), EndDate = new DateTime(2222,1,1,1,1,1) , Official = false },
                new Course { Title = "Titel", Text = "Deze toets is nog bezig", StartDate = new DateTime(2026,1,1,1,1,1), EndDate = new DateTime(2017,1,1,1,1,1) , Official = false },
                new Course { Title = "Titel", Text = "Deze toets is nog bezig", StartDate = new DateTime(2017,1,1,1,1,1), EndDate = new DateTime(2016,1,1,1,1,1) , Official = true }
            }.AsQueryable();

            var results = new List<Result>
            {
                new Result { ResultId = 1, StudentID = 1, CourseID = 1, KeyScore = 100, AccScore = 100 }
            }.AsQueryable();

            var resultMockSet = new Mock<DbSet<Result>>();
            resultMockSet.As<IQueryable<Result>>().Setup(m => m.Provider).Returns(results.Provider);
            resultMockSet.As<IQueryable<Result>>().Setup(m => m.Expression).Returns(results.Expression);

            var courseMockset = new Mock<DbSet<Course>>();
            courseMockset.As<IQueryable<Course>>().Setup(m => m.Provider).Returns(data.Provider);
            courseMockset.As<IQueryable<Course>>().Setup(m => m.Expression).Returns(data.Expression);

            var mockApplicationDatabase = new Mock<ApplicationDatabase>();
            mockApplicationDatabase.Setup(c => c.Courses).Returns(courseMockset.Object);
            mockApplicationDatabase.Setup(c => c.Results).Returns(resultMockSet.Object);

            var DatabaseController = new DatabaseController();
            DatabaseController.ApplicationDatabase = mockApplicationDatabase.Object;

            //Act
            var courses = DatabaseController.RetrieveNonOfficialCourses();

            //Assert
            foreach (Course course in courses)
                Assert.IsFalse(course.Official);
        }

        [TestMethod]
        public void RetrieveCourseCurrentlyAvailable_ShouldReturnACourse_WhenThereIsNoResultForThatCourseFromThatStudent()
        {
            //Arrange
            
            var courses = new List<Course>
            {
                new Course { CourseID = 1, Title = "Titel", Text = "Deze toets is nog bezig", StartDate = new DateTime(2017,1,1,1,1,1), EndDate = new DateTime(2222,1,1,1,1,1) , Official = true },
                new Course { CourseID = 2, Title = "Titel", Text = "Deze toets is nog bezig", StartDate = new DateTime(2017,1,1,1,1,1), EndDate = new DateTime(2222,1,1,1,1,1) , Official = true }
            }.AsQueryable();

            var results = new List<Result>
            {
                new Result { ResultId = 1, StudentID = 1, CourseID = 1, KeyScore = 100, AccScore = 100 }
            }.AsQueryable();

            var resultMockSet = new Mock<DbSet<Result>>();
            resultMockSet.As<IQueryable<Result>>().Setup(m => m.Provider).Returns(results.Provider);
            resultMockSet.As<IQueryable<Result>>().Setup(m => m.Expression).Returns(results.Expression);

            var courseMockSet = new Mock<DbSet<Course>>();
            courseMockSet.As<IQueryable<Course>>().Setup(m => m.Provider).Returns(courses.Provider);
            courseMockSet.As<IQueryable<Course>>().Setup(m => m.Expression).Returns(courses.Expression);

            var mockApplicationDatabase = new Mock<ApplicationDatabase>();
            mockApplicationDatabase.Setup(c => c.Results).Returns(resultMockSet.Object);
            mockApplicationDatabase.Setup(c => c.Courses).Returns(courseMockSet.Object);  
            
            var DatabaseController = new DatabaseController();
            DatabaseController.ApplicationDatabase = mockApplicationDatabase.Object;

            //Act
            var result = DatabaseController.RetrieveCourseCurrentlyAvailable(1);
            var expected = courses.Where(c => c.CourseID == 2);

            //Assert
            Assert.AreEqual(expected.First(), result);
        }

        [TestMethod]
        public void RetrieveCourseCurrentlyAvailable_ShouldReturnNull_WhenThereAlreadyIsAResultForThatCourseFromThatStudent()
        {
            //Arrange
            var courses = new List<Course>
            {
                new Course { CourseID = 1, Title = "Titel", Text = "Deze toets is nog bezig", StartDate = new DateTime(2017,1,1,1,1,1), EndDate = new DateTime(2222,1,1,1,1,1) , Official = true },
                new Course { CourseID = 2, Title = "Titel", Text = "Deze toets is nog bezig", StartDate = new DateTime(2017,1,1,1,1,1), EndDate = new DateTime(2222,1,1,1,1,1) , Official = true }
            }.AsQueryable();

            var results = new List<Result>
            {
                new Result { ResultId = 1, StudentID = 1, CourseID = 1, KeyScore = 100, AccScore = 100 },
                new Result { ResultId = 1, StudentID = 1, CourseID = 2, KeyScore = 100, AccScore = 100 }
            }.AsQueryable();

            var courseMockSet = new Mock<DbSet<Course>>();
            courseMockSet.As<IQueryable<Course>>().Setup(m => m.Provider).Returns(courses.Provider);
            courseMockSet.As<IQueryable<Course>>().Setup(m => m.Expression).Returns(courses.Expression);
            
            var resultMockSet = new Mock<DbSet<Result>>();
            resultMockSet.As<IQueryable<Result>>().Setup(m => m.Provider).Returns(results.Provider);
            resultMockSet.As<IQueryable<Result>>().Setup(m => m.Expression).Returns(results.Expression);

            var mockApplicationDatabase = new Mock<ApplicationDatabase>();
            mockApplicationDatabase.Setup(c => c.Results).Returns(resultMockSet.Object);
            mockApplicationDatabase.Setup(c => c.Courses).Returns(courseMockSet.Object);

            var DatabaseController = new DatabaseController();
            DatabaseController.ApplicationDatabase = mockApplicationDatabase.Object;

            //Act
            var result = DatabaseController.RetrieveCourseCurrentlyAvailable(1);

            //Assert
            Assert.IsNull(result);
        }

        [TestMethod]
        public void CheckCourseWithStudent_ShouldReturnTrue_WhenTheIDsAreTheSame()
        {
            //Arrage
            Course FakeCourse = new Course {  Title = "Titel", Text = "Deze toets is nog bezig", StartDate = new DateTime(2221, 1, 1, 1, 1, 1), EndDate = new DateTime(2222, 1, 1, 1, 1, 1), Official = false };
            Result FakeResult = new Result { ResultId = 1, StudentID = 1, CourseID = FakeCourse.CourseID, KeyScore = 100, AccScore = 100 };

            //Act
            var result = dbController.CheckCourseWithStudent(FakeCourse, FakeResult);

            //Assert
            Assert.IsTrue(result);
        }

        [TestMethod]
        public void CheckCourseWithStudent_ShouldReturnFalse_WhenTheIDsAreNotTheSame()
        {
            //Arrage
            Course FakeCourse = new Course { Title = "Titel", Text = "Deze toets is nog bezig", StartDate = new DateTime(2221, 1, 1, 1, 1, 1), EndDate = new DateTime(2222, 1, 1, 1, 1, 1), Official = false };
            Result FakeResult = new Result { ResultId = 1, StudentID = 1, CourseID = FakeCourse.CourseID-1, KeyScore = 100, AccScore = 100 };

            //Act
            var result = dbController.CheckCourseWithStudent(FakeCourse, FakeResult);

            //Assert
            Assert.IsFalse(result);
        }
    }
}
